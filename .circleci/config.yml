version: 2

jobs:
  build_push_image:
    docker:
      - image: circleci/python:3-stretch-browsers
    steps:
    - run:
        name: Install AWS CLI
        command: |
          if [[ $(command -v pip) == "" ]]; then
            echo "PIP is required to install AWS CLI and is not available."
            exit 1
          else
            if [[ $(command -v sudo) == "" ]]; then
              echo "SUDO is required to install AWS CLI and is not available."
              exit 1
            else
              if [[ $(command -v aws) == "" ]]; then
                sudo pip install awscli
              else
                echo "AWS CLI is already installed."
              fi
            fi
          fi
    - run:
        name: Export AWS credentials
        command: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID --profile default
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY --profile default
          aws configure set region ${AWS_REGION} --profile default
    - checkout
    - setup_remote_docker # key which creates a separate environment for each build for security
    - run:
        name: Create the ECR Repository
        command: |
          aws cloudformation deploy --template-file .circleci/ECR.yml --stack-name mdcpss-ecr-circleci --region ${AWS_REGION} --parameter-overrides Environment=${STAGE} RepoName=${SS_ECR_REPO_NAME} --capabilities CAPABILITY_NAMED_IAM
    - run:
        name: Push the docker image
        command: |
          $(aws ecr get-login --no-include-email --region ${AWS_REGION})
          docker build -t ${dev_AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${STAGE}-${SS_ECR_REPO_NAME}:latest .circleci/
          docker push ${dev_AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${STAGE}-${SS_ECR_REPO_NAME}:latest
          echo "Docker image was uploaded"

workflows:
  version: 2
  build_and_test:
    jobs:
      - build_push_image

